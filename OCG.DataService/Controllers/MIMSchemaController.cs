using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using OCG.DataService.Contract;

namespace OCG.DataService.Controllers
{
    /// <summary>
    /// Manage MIM Portal schema
    /// </summary>
    [Route("api/mim/schema")]
    [ApiController]
    public class MIMSchemaController : ControllerBase
    {
        private readonly ISchema schema;

        /// <summary>
        /// Constructure
        /// </summary>
        /// <param name="schema">Repository to fetch MIM Portal schema</param>
        public MIMSchemaController(ISchema schema)
        {
            this.schema = schema;
        }

        /// <summary>
        /// Gets and caches the schema with the given <paramref name="typeName" /> and <paramref name="culture" />
        /// </summary>
        /// <param name="token">Token of the resource management client, generated by init mothed</param>
        /// <param name="typeName">Type name</param>
        /// <param name="culture">In which language the schema should be returned, see <a href="https://docs.microsoft.com/en-us/bingmaps/rest-services/common-parameters-and-types/supported-culture-codes" target="_blank">supported culture codes</a></param>
        /// <returns>A dictionary with attribute name as key and attribute info as value</returns>
        /// <response code="200">Request succeeded</response>
        /// <response code="400"><paramref name="token" /> or <paramref name="typeName" /> is not present, or invalid <paramref name="typeName" /></response>
        /// <response code="409"><paramref name="token" /> is invalid or expired</response>
        [HttpGet("{typeName}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status409Conflict)]
        [ProducesDefaultResponseType]
        public async Task<ActionResult<Dictionary<string, DSAttribute>>> GetSchema(
            [FromQuery, Required] string token, [FromRoute] string typeName, [FromQuery] string culture = "en-US")
        {
            try
            {
                Dictionary<string, DSAttribute> result = await Task.Run(() =>
                {
                    return this.schema.GetSchema(token, typeName, culture);
                });

                return result;
            }
            catch (ArgumentException e)
            {
                return this.BadRequest(e.Message);
            }
            catch (InvalidOperationException e)
            {
                return this.Conflict(e.Message);
            }
        }
    }
}